apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-migrate"
  labels:
    app: {{ template "chatwoot.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": {{ .Values.hooks.migrate.hookAnnotation }}
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    "helm.sh/hook-weight": "-1"
spec:
  completions: 1
  completionMode: "NonIndexed"
  activeDeadlineSeconds: 1800
  template:
    {{- with .Values.hooks.migrate.podAnnotations }}
    metadata:
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      containers:
      - name: "db-migrate-job"
        image: {{ include  "chatwoot.image" . }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Run the database migration
          bundle exec rails db:chatwoot_prepare

          # Check if the migration was successful
          if [ $? -eq 0 ]; then
            echo "Migration completed successfully, shutting down Istio sidecar"
            wget -q --post-data='' http://localhost:15000/quitquitquit -O /dev/null || echo "Failed to shut down Istio sidecar"
            echo "Job completed"
          else
            echo "Migration failed"
            exit 1
          fi
          exit 0
        env:
        {{- if .Values.postgresql.auth.existingSecret }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret }}
              key: {{ default "password" .Values.postgresql.auth.secretKeys.adminPasswordKey }}
        {{- end }}
        {{- if .Values.redis.auth.existingSecret }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.redis.auth.existingSecret }}
              key: {{ default "password" .Values.redis.auth.existingSecretPasswordKey }}
        {{- end }}
        envFrom:
          - secretRef:
              name: {{ template "chatwoot.fullname" . }}-env
        {{- if .Values.existingEnvSecret }}
          - secretRef:
              name: {{ .Values.existingEnvSecret }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: {{ include "chatwoot.serviceAccountName" . }}
      {{- if .Values.securityContext }}
      securityContext: {{ .Values.securityContext | toYaml | nindent 8 }}
      {{- end }}
      volumes:
        - name: cache
          emptyDir: {}
